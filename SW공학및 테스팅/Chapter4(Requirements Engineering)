< 4장 : Requirements Engineering >

  ** 목차
      - Functional and Non-Functional Requirements (두개를 어떻게 구별할 것인가?)
      - Requirements Engineering Process (Requirements를 작성해 나가는 방법)
      - Requirements Elicitation (Requirements 끌어내기)
      - Requirements Specification (스펙을 만들어 나가는 방법)
      - Requirements Validation ( Requirements 검증)
      - Requirements Change
      
      
    *** What is a Requirements(그래서, Requirements란 무엇인가?)
      >> 두루뭉실하게 되어 있는 것은 Spec이라, Requirements라 이야기하지는 않는다.
      >> 정확하게, 자세하게 기술되어야 한다. 문장으로 표현되는 경우가 많다. 
      >> 주고받는 형식 또한 있음. 

    *** Requirements Abstraction(Requirement 개요)
      >> Customer의 Need, Customer가 필요로 하는것이 어떤 것이다 라는 것을 굉장히 큰 틀에서 정의하고 시작하게 됨.

    *** Types of Requirements  (User vs System)
      >> User Requirements 
        -> 고객이 필요한 것. 사용자 입장에서든, 운영자 입장에서든, "User" 입장에서 보았을 때 필요한 Requirements
        -> 자연어나, 다이어그램 등의 형태로 많이 기술된다. 
        -> 사용자가 특정한 범위의 사용자일 수 있음. (ex:20대 남성, 이런 식으로 한정해서 생각할 수 있음.)
        
      >> System Requirements
        -> 주로 Diagram, 자연어보다는 Document로 해결을 한다. (부정확하게 기술되면 시스템이 정확이 어떻게 동작해야 하는지 잘 모르는 경우
            가 많다). 
        -> Detail Description이 필요함! 
            ex) 단순히 로그인에 대해서도 상세히 기술해야 함.
                - 지문 인식, 안면 인식, ID 사용, SNS 로그인 등 할 수 있다. 
                - ID의 경우에는 몇 자 이상 몇 자 이내로 해야 하는지 등 --->> 구체적으로 기술이 되어야 한다!!
                
    *** User and System Requirements(예시, 그냥 보고 넘겨도 ㄱㅊ)
      >> User Requirements : 한줄임. 그냥 사람이 하는 말처럼 구현해 놓음. ~~~한거 해주세요!
      >> System Requirements : 엄청 상세하게, 어떨 땐 어떤 기능을 해야 한다는 것을 적어 놓음.
      
      >> 개발자는 User Requirements에서 System Requirements를 뽑아 내야 한다!
      >> 고객이 이렇게 System Requirements처럼 주면 제일 좋지만, 대부분 그렇지 않다. 그래서 User가 저렇게 한 마디 해 주면 개발자는
         이런 내용들을 말로, 혹은 문서로 기술해서 다시 보여줘야 함. 
         -> 만약 그냥 위의 작업 없이 WaterFall로 하면, 제품 만들고 나서 나중에 보니, "이렇게 보니 아닌것같다. 바꿔줘!" 할 수 있음
         -> 만약 이렇게 정해진 것이 없다면, 이런 Requirements를 뽑아내기 위해서라도 Prototyping이 필요한 것이다 .
            (프로토타입을 만들어서 눈에 보여주는 것임)
            
    *** Readers of Different Types of Requirements Specification (누가 보느냐?)
      
      >> User Requirements 
          -> 클라이언트 매니저(고객관리, 고객담당)
          -> System End-Users(실제 사용자. 사용하는 사람이, 자기가 이야기한 Requirements가 맞는지 확인)
          -> System Architectures
      
      >> System Requirements
          -> System End-Users(사용하는 사람이 한번더 보게 됨)
          -> Client Engineers
          (개발자(Developer)가 이런 User Requirements를 볼일은 별로 없음. 프로젝트 매니저나, 고객과 소통하는 사람들이 User Requirment
           확인하고, 일반적인 말단 개발자는 User Requirements가 크게 고려대상은 아니다)
          ( System Requirements가 다 정해져 있는 상태에서, 설계하고 개발해 나가는 것이다)
          ( User Requirements : 기획하는 쪽 / System Requirements : 개발자가 시작해 나갈때 필요한 것)
          
    *** System Stakeholders(이해당사자)
      >> End User
      >> System Manager
      >> System 소유주 ( 주로 의뢰를 맡기는 쪽. 물론 본인이 쓸거면, End User와 System 소유주가 동일인물이 된다)
      >> 외부 관계자
          
      >> System이 커지는 것보다, StakeHolder가 많아지는 경우가, 더 상황이 복잡한 경우가 많다.
         -> 사용자는 깔끔한 UI를 원하는데, 관리자들은 한번에 펼쳐놓고 복잡한 정보들을 한 눈에 다 볼수 있는 경우를 원하는 경우.
           (이런것때문에 관리자 페이지와 사용자 페이지를 따로 만듬)
           (현실적으로 불가느하면, 둘중하나로 타협을 해야 함)(Stakeholder 들이 있으면, 이런 것들을 고려하는 것이 제일 힘듬)
           
    *** Agile Method and Requirements 
      >> System Requirement 같은 경우, Detail하게 기술해야 한다. 
         -> 구체적이지 않으면, 해당 부분에 대해서 개발자가 상상해서 구현해야 함.만약 Customer가 그것을 원한게 아니면 그 다음부터는 힘들어짐.
      >> Agile 방법에 있어서는, 구체적인 Requirements보다는, 완전 상세한 Requirement보다는 어느 정도까지만 Detail하게 뽑고, 
         Requirement 만드는데 그렇게 많이 시간을 쏟아서는 안된다.(정도껏 해야함) 당장 코딩하기도 바쁜 방법임!
           (절충선을 개발자가 잘 찾아서 진행해야 함)
           
      >> Requirement 문서도, System Requirement같은 경우 대부분 문서로 만들어지는데, Agile에 있어서는 이것도 최소화해야 함. 
      >> Agile 같은 경우, User Story(Senario)를 가지고 User Requirement를 표현해내야 하고, Requirement안에 User Story를 포함시켜야 함.
      >> 물론, User들이 User Requirement를 바로 제공하는 경우는 별로 없다. 그냥 "~했으면 좋겠어요!" 하고만 이야기하고, 개발자가 그 부분에서
         User Requirement를 뽑아 내야 함. 
         
      >> User에게 계속 확인시키면서 수정해 나가야 함. 그렇게 정하고 나서 Confirm이 나오고, System이 어떻게 돌아가는지 설명해 드린 뒤
         최종적으로 괜찮다 고 하면 System Requirement를 확정짓는 과정임. 
      >> 실제 Business System의 경우, 다같이 문제를 분석해 해결하는것보다도, 여러개의 팀에 의해 나눠져 개발되는 경우가 만하. 
         여러 팀에 의해서 개발되다 보니 Requirement가 계속해서 바뀌게 된다.(Agile이다 보니, 안맞으면 바꾼다고 가정을 해야 함!)
         (Change가 계속 발생하는 것이다) 
         
      >> 그렇기에, Agile에서는 그냥 User Story에 집중해 최대한 빨리 만드는 데 목표를 둔다. Customer와 합의한 내용을 쭉 개발자들에게 
         알려주고, "이 사람은 이런걸 원하는데 여기에 맞게끔 우리가 알아서 개발을 해야 돼!" 하는 것임.
      >> Spec를 디테일하게 만드는게 중요한 게 아니다. 만들어서 가져가 보고 오케이 나면 그 다음 진행하는 식임.
      >> Business System에 있어서는 이런 방법이 현실적이기는 하다. 문제를 해결하는 System 같은 경우에는 Delivery-Analysis같은 것들이 필요
         한데, Business System의 경우에는, 미리 한번 만들어 보여줘서 분석을 하는 방식이다. 
         
   < Spec이 이런 식으로 작성되고, 구성되고, 진행된다, 만들어진다. 라는 것을 개략적으로 파악하면 된다고 한다. 생각만큼 딱딱 정해져서 개발하는
     것이 아니다! 라는 것임 >
     (Spec을 어느 정도 Detail하게 구성을 하되, 너무 거기에 시간을 쏟지는 말자. 실제로 개발해서 보여줬을 때 고객이 느끼는 체감은 어차피
     다를 것이다. )(그냥 어느 방법(Agile vs Waterfall)에서 어디에 치중을 두어 개발할지 선택해 진행하면 된다)
     
    
    
  ** Functional and Non-Functional Requirements
    
      >> Spec 안에는, Functional / Non-Functional / Domain Requirements 3가지가 꼭 포함이 되어야 함. 
        (경우에 따라서는 Non-Functional 이나 Domain Requirement들은 빠져 있을 수도 있음)
      
      >> 대부분 학생들에게 Requirement 작성하라고 하면, Functional Requirement만 작성하고 끝난다. 
      >> 로그인이 1초 이내로 완료되어야 한다 와 같은 내용의 Requirement는 생각을 안 한다. 로그인하는데 5~10초 걸리면 누가쓰겠는가?)
          -> 이런 내용들이 Non-Functional에 해당된다!    
      >> 특성,성능, 퍼포먼스 같은 특성들은 모두 Non-Functional Requirement에 해당되고, 프로그램의 제약사항에 포함됨.
         ex) System이 하루종일 24시간 동작해야한다 같은 것들도, Non-Functional Requirement에 해당되는 것이다
         ex2) 프로그램 잘 돌다가, 1시간 만에 발열 이슈로 다운되면 안되는 것도 Non-Functional Requirement!
         
      >> Functioanl Requirement는 이미 다 잘 아는 내용. (어떤 동작을 해야 하는지, 어떤 행위를 해야 하는지 등)
      >> Functional 제외하고는 거의다 Non-Functional이라고 생각하면 된다. 
      
      >> Domain-Requirement
          -> 사용자나 사용되는 환경에 특화된 Requirement가 Domain-Requirement이다.
           ex: 학교에서 사용되는 프로그램과, 군대에서 사용되는 프로그램은 그 형태나 모습이 많이 다를 것이다.
           (똑같은 프로그램이라도, 군대로 들어가는 순간 외부 인터넷과 연결이 되어서는 안된다)-> Domain Requirement
           
           ex2: 의료분야에서, Software에서 환자들의 개인정보는 인가받은 사람만 열람해야 한다 -> Domain Requirement
           
           
     
     *** Functional Requirements 
       >> Functional Requirement나 System service에 대해 기술
       >> 어떠한 사용자가 쓸 것인지, 어디서 쓸 건지와 같은 것들로 Requirement가 많이 작성이 된다. 
       >> 굉장히 높은(최상화된) Level에서 이루어진다. 
       >> 디테일하게 써줘야함.(시스템이 어떻게 동작하는지는 덜 추상적인데, 서비스 같은 경우에는 "~한 서비스를 만들 것이다" 와 같은
          추상화된 내용으로 많이 나온다. 최대한 디테일하게 서비스에 대해 작성해주는 것이 좋다.)
           ex) (Mentcare System : functional Requirements)
            - 유저는 병원에서의 예약내역을 볼 수 있어야 한다. 
       
     *** Requirement Imprecision (Requirement가 부정확할 때, 애매모호할때 생기는 문제들)
       >> Functional Requirement가 부정확하면, 애매한 Requirement가 된다. 
       >> 애매하게 쓰면, 중의적인 표현이 있을 수 있고, 그런 중의적인 표현같은 경우 정확히 해석이 안되는 경우가 있음.
       >> 개발자가 해석한 내용과, 사용자나 Requirement를 제공한 사람들/서비스를 이용하는 사람들이 받아들인 내용이 다 달라진다
       ex) Search : 
           - 유저가 의도한 것 : 환자 이름을 넣었을 때, 그 환자와 관련된 모든 진료내역이 나와야 한다(모든 병원에 있어서)
           - 개발자가 이해한 것 : 환자 이름을 넣었을 때, 그 환자가 병원에서 받은 모든 진료내역이 나와야 한다(그냥 그 해당병원에서)
                                  (병원마다 다 따로 검색이 됨)(이렇게하면, 개발자가 개발하기 더 쉬움)
           -> "모든 진료내역이 나와야한다!" 라는 내용이 어느 스케일에서 진료내역인지 확실하지 않고, 중의적이다. 
           -> 그냥 "모든 진료내역" 이라고 했으니, 개발자가 이해한 것도 아예 틀린 이야기는 아니다. 
           
         
     *** Requirements Completeness and Consistency (Requirement는 완결성이 있어야 하고 한결같아야한다!)
       >> Completeness : 모든 Requirement 항목에 그에 상응하는 설명이 있어야 한다!
           -> 모든 기능 설명에서 모르는 단어나 시스템이 있으면 안된다. 
           -> 필요한 것들은 싹다 명시를 해줘야한다! + 설명 안에서도 어떤 동작에 대해 필요한 설명들에 대해서는 언급이 반드시 되어야 함.
           
       >> Consistency : Requirement 안에 충돌이나 모순되는 내용이 없어야 한다. 
           ex) Requirement 두개가 있는데, 두 항목이 서로 절대로 같이 일어날 수 없는 Requirement가 있을 수 있다. 이런 경우에는 
               둘중에 하나를 바꿔야 한다. 
               
       >> Requirement 작성할 때 단순히 작성했다고 끝나는 것이 아니라, 내가 정확하게 다 기술했는지, 필요한 것들이 모두 나열되어 있
          는지, 나열한 것에서 충돌이나 모순되는 부분은 없는지 꼼꼼히 확인해야 한다. 이런것들이 다 꼼꼼하게 확인이 되어야,
          "Requirement 로써 유효하다" 라고 할 수 있는 것이다. 
          
       >> 실제로 하다보면, 기능적으로 Requirement 짜놓고 보았을 때는 아무 문제가 없는데, 실제로 설치되어 사용할 곳을 가보니
          설치되어 사용될 환경과 맞지 않는 것이 있을 수도 있음. 
            ex) 어떤 장비를 설치하러 갔는데, 설치할 곳이 경사가 있음. 삐딱하게 세울 수밖에 없는 곳. 하지만 카메라를 해당 환경에
                설치를 할때는, 삐딱하게 볼 수 밖에 없는 환경임. 하지만, 카메라 시야가 0도~180도 사이라고 가정해버리면, 해당 
                Requirement를 만족시킬 수가 없는 것이다. 
                
            -> 보통은 어떤 시스템을 만들 때, 그 대상을 아주 일반적이고 흔히 아는 환경에 대해서만 생각한다. 
                ex) 기차를 탈 때 모든 경로를 직선으로 생각한다던지 / 자율주행 자동차가 달리는 도로가 모두 환경이 좋은 길로만 생각한다던지
                
            -> 이런 환경에 대해서도 반드시 고려해야 할 대상 중 하나이다!!     
            
     *** Non-Functional Requirements 
       >> Reliability(신뢰성) : 시스템을 신뢰할 수 있는가? (아래의 요건을 만족시키는 것을 보고 Reliability라고 한다)
            -> 시스템에서 서비스를 제공할 때, 이 서비스를 사용자가 원하는 시간대에, 어떤 요청을 보냈을 때 언제든지 믿을 수 있는 
               결과를 제공하는가? (중간에 서버 안뻗고)
            -> 언제든지 사용자가 이용하고 싶을 때 이용 가능하고, 돌아오는 결과값이 믿을 수 있는 결과를 받아야 한다. 
            -> 서비스가 꾸준하게, 언제든지 잘 이루어질 수 있도록 하는 것.
             ex) 은행이 9시 반~3시 반까지 하는데, 최소한 그 사이 시간대에 은행을 가면 언제든지 은행문이 열려 있어야 함!
                 (물론 그 시간이 아니면 서비스를 받지 못할 것임)
                 - 사용자는 최소한 그 시간대에 방문했을 때 언제든지 서비스받을 수 있다는 생각을 가질 것임. 
                 - 만약, 10번 중 한번은 해당 은행에 감사가 나와서 3시 반이 아닌 3시에 마감했으면, reliability = 90% 가 될 것이다. 
                   (10번 중 1번은 이용하지 못했기 때문)
             
             -> 사용자가 서비스를 제공받는데, 실제로 이 시스템을 사용하려 할 때 서비스를 제공받을 수 있었는가? 의 관점이다. 
       
       >> Response Time / Storage Requirement 도 다 Non-Functional Requirement 에 포함되는 것이다. 
       >> 위의 두개가 "기능"이라고 볼 수 있지 않는가? : "기능"은, 말 그대로 "어떤 것을 할 수 있냐 없냐"의 문제임. 
          "기능이 좋다" 라고 하는것은 생각해보면 다 Non-Functional이다. 퍼포먼스와 같은 것.
          
       >> Process Requirement 라는 것도 존재한다! 
             -> IDE / Programming Language / Development Method 같은 것들도 하나의 Requirement로 볼 수 있는 것이다. 
               ex) 해당 시스템 개발할 때, Visual Studio로 개발해 주세요! 같은 것들이 있을 수 있다. 이런 경우는 해당 소스코드까지
                   고객이 다 가져가겠다는 의미. ( 일부 파트를 외주로 줘서 개발을 하는데, 자기네 회사에서 개발한 환경과 똑같이 만들어
                   주세요! 하는 case. 그래야 그것을 고대로 복사해서 그 회사 컴퓨터에 깔면 바로 작업할 수 있을 것임.)
                   
       >> Non-Functional 과 Functional을 비교할 때, 둘중 "만족되지 않았을 때" 문제가 커지는 것은? : Non-Functional이다!
             -> Functional은 그냥 안되면, 해당 부분이 빠졌다고 이야기하고, 나중에 거의 다 구현할 수는 있는 애들이다
             -> Non-Functional은 만족이 안되면, 크게 구조를 다 갈아엎는 경우가 굉장히 많다. 지금 상태의 코드에서 아무리 고쳐도
                Non-Functional 부분이 만족이 안되면, 해당 알고리즘을 통째로 바꿔야 함!
                ex) Sorting에서 Bubble Sort로 짰는데, 무슨수를 써서도 거기서 속도가 더 안올라가면, Sorting 알고리즘을 아예 바꿔야 함
                ex2) 기존의 것에서 문제생겨서 완전히 새로운 라이브러리를 갖다써야 하는경우, 기존에 해놨던 건 싹 폐기하거나 전체수정을
                     해야 하는 경우도 있다. 삭제하는 것보다 안에 있는 것을 바꾸는게 제일 힘듬. 바꿈으로 인해서 개발자가 짠 코드들을
                     다 기억할 수 있으면 좋은데, 대체로 그렇지 못하기 때문이다. (Side-Effect가 발생하는 경우가 많다)
                ex3) 처리 속도와 처리량은 당연히 반비례 관계인데, 양이 많아지면 속도는 느려질 수 밖에 없고, 속도를 올리자니 양을
                     줄이는수밖에 없다. 그런데 정보의 양은 더 더 많은 것을 요구하는 경우가 대부분 많음. 그런 경우에 있어서 
                     처리속도를 만약 못 맞춰내면, 싹 다시 개발해야 되는 경우가 훨씬 많다. 해당 기능을 구현하려고 짰던 방식들이 다 
                     잘못되었다는 이야기임. 그럼 그 친구를 갈아엎으면, 뒤에 따라오는 기능들도 싹 갈아 엎어야 한다. 
                     
             -> Non-Functional 이 만족이 안되면 싹 갈아엎거나 일이 커지는 경우가 많다. 
             
             -> 삼성 안드로이드로 개발해서 퍼포먼스가 나올 줄 알았는데, 알고보니 IOS 핸드폰으로 돌려야 해당 성능이 나온 경우, 
                삼성에서 개발했던 게 하나도 못쓰일수 있다. 새롭게 개발해야 되는 상황
                -->> 실컷 만들어놨는데, 아예 못쓰게되는 경우다. 애초에 시작이 잘못된 경우라, 해당 제약조건을 맞출 수 없어서 
                     시작했기 때문임. (Non-Functional이 만족이 안됨). 실제로 해당 제약조건이 만족되는지 안되는지 먼저 검증을 하는
                     것이 필요하다!
                     
             -> 이런 문제를 피하기 위해서는, 문제를 쪼개 작게 만들었으면, 나중에 통합하는 과정까지 해 봐야 Non-Functional 문제를
                피할 수 있다고 한다. 만약에 통합이 안되는 상황이면, 실컷 개발해 놓고 마지막에 처음부터 다시 해야되는 상황을
                맞이할 수도 있다. 
                
                
     *** Types of Nonfunctional Requirements
       >> 크게 Product / Organizational / External 로 분류됨. 
       >> 엄청나게 많다. 그래서 있는 모든 Non-Functional 을 모두 고려할 수는 없다
       >> 고려해야 할 것들 순위
         -> 1. System 자체의 Non-Functional Requirements 
         -> 2. Environmental Requirements 
             (실컷 만들었는데, 서버실이 작아서 못들어가면 안된다 or 스마트폰에서처럼 손바닥에서 다룰 수 있는 것을 만들었는데,
             만들어 보니까 패드 상에서 돌릴것이라 하면 안된다. )
         
         (Non-Functional Requirement 같은 경우, Architecture 관점에서 보는 것들이 많다. Sub-System의 작은 단위보다는 큰 System
         적으로 뭉쳐졌을 때 Non-Functional 을 봐야 되는 경우가 훨씬 더 많음)
         (작은 기능에 대한 특성이 없는 경우들이 많음. 어차피 작은 기능이다보니 특성이랍시고 꼽을 게 별로 없는 것이다)
         (로그인 할때 Critical 문제가 생긴다던가 하는 경우가 거의 없다. Non-Functional Testing할 때는, 시스템에 다 포함되고 난
         이후에 Testing 하는 단계에서 주로 테스팅이 이루어진다. )
         
         -> 3. Security Requirements : 여러개의 Functional Requirement가 연결되어, 또는 Requirement에 독립적으로 모든 것에 다 
               적용이 되어야 하는 경우들도 있다. 보안쪽은 보통 마지막에 싹 처리하거나, 제일 처음에 처리하고 들어가는 경우가 많음. 
               (보안은 아예 하나의 분야이기 때문에, 보안 레이어를 따로 두어 작업하는 경우가 많다)
               (필요하다! 라는 것 정도만 알면 되겠다. 보안전공할 게 아님)
               
         -> 4. Product Requirement : 실행 시간, Reliability(중요)
                   (실컷 만들었는데 고객이 시스템에서 어떠한 기능을 제공받지 못하면 무쓸모임!)
                   (실행 시간도, 시간이 무지막지하게 길어지면 별로 안좋다)
                   
                   
          (5. Process Standard : 절차적으로 진행할때, Standard가 무엇인가? / Standard를 잡아 놓고 일을 해야 한다!
              그래야 나중에 서로 오해 안생기고, 헷갈리는 부분이 없음. 효율적인 것을 떠나서, 프로세스는 절차, 표준이 
              대단히 중요하다. 물론, 표준에 따르게 되면 귀찮고 비효율적인 것들이 굉장히 많다. 하지만 많은 사람이 참여하게 되면
              사람이 많아질수록 표준이 힘을 발휘한다. 
              Naming Rule부터 시작하는 것임! CamelCase라던지, snakeCase라던지 등등) 
               
               
     *** Goals and Requirements 
       
       >> Non-Functional Requirements같은 경우에는, 추상적인 것들이 많다. 그래서 정확하게, 정밀하게 어떤 것을 하거나 검증하는 것이 
          대단히 어렵다. 
             ex) "이 시스템은 한달 동안 아무 문제없이 동작해야 한다" 와 같은 것을 검증하려면, 한달 실제로 걸린다. 
                 테스트가 한방에 끝나면 좋겠지만, 29일째 문제가 생기면, 고치고 새로 돌려야 함. 
                 -> Non-Functional 같은 것들을 검증하는게 굉장히 어렵다. 그리고 딱 집어내는 것들이 어려운 경우도 많다. 
                 
       >> Non-Functional Requirement에서 중요한 것 중 하나는, "사용자의 의도" 이다. 
             ex) 5초 이내로 동작해 달라고 했는데, 10초 이내로 해도 되는 경우, 실제 5초라는 Requirement를 만족시키지 못해도, 실제
                 "사용자의 의도" 는 그게 아니기 때문에, 어느 저도 감내할 수 있는 문제가 되어 버린다. 
       
       >> 사용자가 직접 사용해 보아, 뭔가 편하고, 의도대로 만들어졌어! 라는 것을 보증하는 것이 결국 Non-Functional Requirement이다.
       >> 시스템 사용자의 의도에 맞게끔 만들게 하기 위해, 개발자를 도와주는 요소가 "목표"(Goal)이다. 그 Goal을 만족시키기 위해서는
          Non-Functional Requirement이다. 
       >> 기능적으로는 당연히 명시가 되어 있는 것이니, 그렇게 만들어주면 되는 것이다!
       >> 나머지 부분들은 사용자의 체감에 연관된 것임. 사용자가 사용했을때 나쁘다/불편하다/편하다 와 같은 애들도 Non-Functional
          Requirement에 해당되는 내용이다. 
          
     *** Usability Requirements

       >> 사용성에는, Interface 적인 측면이 많다. 
       >> 실제 사용했을 때 색감이 좋다/나쁘다/예쁘다/색감이 좋다/ 이런애들이 다 사용성이라고 할 수 있음
           ex) 너무 알록달록하면, 눈이 아프기 때문에 사용성이 안 좋은 것이다. 
       >> 사용자가 사용할때, 에러를 안 일으키고 의도했던 대로 사용자가 잘 시스템 프로그램을 사용하느냐? 가 사용성이다!
           ex) 아무것도 안 알려줬는데, 10명 중 9명은 그냥 잘 하면 사용성이 좋음. / 시켰는데 10명 중 5명이 잘 못 사용하면 사용성이 좋지 않은 것임. 
               
     *** Metrics for Specifying Nonfunctional Requirements
     
       >> Non-Functionality 를 보고 보통 Property(특성) 이라고도 많이 이야기함. 
          (조금은 다르다. 보통 Property를 다 모아놓은 것을 가지고 Non-Functionality라고 이야기함)
          (Non-Functionality 같은 경우, 그 안에 Property가 들어가 있다고 생각하면 된다)
       
       >> Property : Speed / Size / Easy of Use(사용성) / Reliability / Robustness / Portability
       >> 각각의 Property를 측정하는 방법이 Measure.
              
              -> Reliability : 에러가 발생하는 평균 시간. (하루에 한번정도 발생하는지 하루에 10번 정도 발생하는지)
                             : 실제 가용 시간 (얘는, 24시간 중에 6시간 못쓴다치면, 밤 시간 6시간을 못쓰는지, 아니면
                              1시간마다 15분씩을 못쓰는지가 다른데, 그런 부분을 반영하는 것을 못한다)
                              
                              ->> 물론 Reliability가 높으면 높을수록 당연히 좋은 것임.
                             
                             : 정해진 기간에 얼마나 Failure가 발생하는가? ((3개가 다 Reliability 에 대한 Metric))
                             
                             
              -> Robustness : 얼마나 잘 버티는가? (에러가 났을 때도, 시스템이 안 죽고 잘 버티는가?)
              -> Portability : 이 컴퓨터 저 컴퓨터에서 다 잘 돌아가는가? 
              
              ((나머지는 그냥 읽어보기 (26/88) ))
              

  ** Requirements Engineering Process ( Requirement가 어떤 과정을 거쳐서 만들어지고, 검증되고, 관리되는가? )
  
     *** A Spiral View of the Requirements Engineering Process (그림 4.1)
     
       >> 보통 이런 것을 Spiral Model(나선형 모델) 이라고 함. 
       >> 나선을 따라 돌면서, 했던것들을 하고 또 하며 점점 확장되어 나가는 개념
       >> Agile에서도, BackLog 가지고와서, 정리해서 개발하고 테스팅, 계속 돌아가는 구조와 마찬가지임. 
       >> Agile과 다른 것은, 그때는 단순히 반복적으로 수행했다면, Spiral Model에서는 확장되면서 돌아간다는 차이가 있음. 
       >> Agile이 단순반복이었다면, 지금은 그 영역 자체가 늘어나면서 가는 것이다. 
     
     
       >> 단계 :
              -> Business Requirements Specification : 어떠한 사업모델을 지향해야 하는가?
              -> Feasibility Study : 사업이 실제로 우리에게 유효한가? 사업으로써의 가치가 있는가? 진행가능한가? 등을 수행분석
                            (예산, 기술, 조직적인 부분포함. Feasibility 분석도 해야 함!)
              -> User Requirement Elicitation ( Elicitation : 끌어내기 ) 
              -> User Requirement Specification : 스펙을 정의하는 단계
              -> Prototyping : 껍데기를 개략적으로 만들어보는 단계
              -> System Requirement Elicitation 
              -> System Requirements specification & Modeling
       
       >> 이렇게 진행되는 것이 하나의 순서로써 Spiral Model 안에 들어가게 된다. 
       >> 조금 순서 바꿔도 되기는 하다. 꼭 이 순서대로 안가도 되는데, 보통 이렇게 사이클을 돈다는 의미. 
       
  ** Requirements Elicitation
       
       >>Stakeholder에 관한 여러가지 역할 
              -> End-User도, Engineer도, 유지보수하는 사람도, 시스템을 팔아주는 사람도 모두 Stakeholder가 될수 있음.
              -> 여러 사람들 모두 만족시켜야 한다. 
              
       >> Elicitation : 
              -> Requirement를 먼저 List-Up 함. (어떤게 필요한지, 하나부터 열까지 다 끄집어낸다)
              -> 분류해 묶어 분류함. 혹여나 모순이나 충돌사항, 상반되는 요구사항들끼리 묶어서 한번에 보는 것이 모순점을
                 줄일 수 있는 방법 중 하나이기도 하다. 그래서 모아놓은 것들을 가지고 조직적으로 구분해놓는다. 
              -> 많은 요구사항들을 묶어서, 몇 개로 줄였으면, 중요도를 정함(이거는 꼭 있어야 해! 이거는 없어도 돼!)
                 그래서, 정말 필요한, 가장 중요한 우선순위부터 시작하게 된다. 나중에 하다가, 정말 중요한 기능이 안되면
                 개발 자체가 무용지물이 될 수 있기 때문. 만약에 주요기능이 아닌 것들을 나중에 하다가 시간이 모자라면, 
                 해당 기능은 나중에 개발하는 것으로 하고 빼서 출시할 수도 있을 것이다.
              -> 나중에 이런 과정을 거쳐서 스펙이 정해지는 것이다.
              
     *** Problems of Requirements Elicitation
       >> Stakeholder는, "진짜 자기네들이 원하는 것을 모른다". 
            ex) 공부를 잘 할 수 있는 방법을 알려달라고 했는데, 그 방법이 본인들도 뭔지 모름. 뭐가 되었든, 공부를 잘할수 있는 방법
                이면 좋겠다! 고만 이야기함.
            ex2) 조작을 쉽게 했으면 좋겠다! 고는 하는데, 어떻게 하면 쉽게 조작하는 것인지를 알 수가 없다. 
            -> 정확하게 Customer가, 정확히 본인이 뭘 원하는지 모른다는 것임!
            -> 개발하면서도, 자기가 뭘 개발하는지 알고 하는것과 모르고 하는것이 굉장히 큰 차이를 가져온다. 
            
            -> 요구사항 정할때도 마찬가지. 그래서 개발자가 Stakeholder나 Customer에게 계속 물어보는 것임. 
            -> 처음에는 이렇게 Elicitation 하는 과정들이 힘들고, 골치아프고 신경쓰일지라도, 꼭 그때 해야한다. 아니면 프로젝트가 
               나중에 되면 정말 힘들어지고, 프로젝트가 산으로 가는 수가 있다. 
            -> 오히려 이렇기 때문에, 프로토타이핑 해서 딱 갖다주면, "내가 원하는게 이게 아닌데" 하면 고치면 된다.    
       >> 최대한 구체적으로 정해야 한다!! Stakeholder끼리는 다 다른 분야의 사람들이 모여있음. 
            -> 용어에 대한 정의는 아니더라도, 같은 분야가 아닌 사람들끼니는 한번더 짚고 넘어가야 한다)
            -> 문과생과 이과생이 "function"이라고 이야기하는 것은 다른 용어이다! 다른부분도 이런 용어 다른부분이 많음. 
              (용어정리 풀수이다)
       
       >> Stakeholder끼리 생각이 다 다르다보니, 요구하는 Requirement가 다 다르다.
       >> 조직적이고, 정치적인 문제도 물론 있을 수 있음.

     *** Requirements Discovery
       >> 기존에 있던 System들에 대한 요구사항들은 모두 다 알 수가 있다. (이미 한번 만들어져있기 때문.) 그렇기에 쉽게 정보를
          얻을 수 있다. 
       >> 당연히 System에서도 일반적으로 다양한 Stakeholder 있다.
       
     *** Interviewing 
       >> 다양한 StakeHolder 중에는, 누군가는 프로젝트 리더가 있거나, 리더 그룹이 있을 것이다(주도하는 그룹이 있을 것임)
       >> 다른 Stakeholder에게는, 원하는 정보를 대화를 통해서 얻어낼 수밖에 없다. 그래서 인터뷰 해야 함. 
       >> Types of Interview : Closed Interview vs Open Interview
            -> Closed Interview : 이미 결정된, 정해져 있는 질문들을 함.("우리 이렇게 하기로 했는데, 어떻게 생각해?") 
                    (만약에 부결이 나면, 결정을 뒤집어 엎을 수는 있음)
            -> Open Interview : 아직 뭔가 결정된 것이 아님. Stakeholder 간에 Issue들이 Open되어 있는 상태에서 인터뷰함. 
       
       >> Effective Interviewing
            -> 인터뷰할 때 오픈 마인드로, 잘 듣고 잘 이야기하며, 마음의 문을 열고 이야기하면 된다. 
            -> Springboard Question, Requirement Proposal(요구사항 제안) 같은 방법들을 써서 인터뷰할 수 있다.
            -> 시스템을 같이 만들면서 이야기할 수도 있을 것임.
            -> 어쨋든, 여러가지 방법으로 서로 이야기하면서 최대한 많이 Requirement를 뽑아내야 한다!
            
     *** Interviews in Practice
       >> 보통은 앞에서 나온 Closed Interview 와 Open-ended Interview를 섞어서 한다.
       >> Interview의 장점 : Stakeholder들이 생각하고 있는 Spec에 대해서, 이해를 하고 개발을 한다라는 데 있음. 
                             개발하는 순간에도, 어떤 이슈가 생기거나 수정해야 할 필요가 생겼을 때 빛을 발한다. 
                             원래 Interview를 안한 상태였으면, 그냥 개발자 생각대로 진행하게 되는데, Interview를 잘
                             한 상태였으면, Stakeholder들이 원하는 정보대로 조금 더 잘 갈수있는 확률이 더 높아지는 것임.
                            (어차피, 개발자 맘대로 개발을 해 봐야, 나중에 Stakeholder 마음에 안들면 또 바꿔야 할 수도 
                             있기 때문이다. 아니면 설득시키는 과정이 필요하다)
                             
     *** Problems with Interviews 
       >>  원래 Requirement를 결국 설명서로 쭉 적는 것인데, 인터뷰같은 경우 앉아서 이리저리 이야기하는 식이라서 좀 다르다.
           그렇기 때문에, 녹음을 하던지, 아니면 집에가서 다 받아적어서 다시 Description으로 새로 정리를 해야 하기 때문에 조금 더 
           정리하는 Requirement Engineer가 수고롭게 된다. 
                             
       >>  Domain Requirement에 대해서 이해하기 어렵다 
            -> 그쪽 분야의 사람만 아는 것을, 개발자가 아무리 인터뷰해 봐야 알기가 어렵다. 물론 인터뷰를 안하는 것 보다야 낫겠지만, 
               인터뷰로써 Domain Requirement에 대한 일정 부분은 알아내기가 쉽지 않다.
               
            -> 이런 부분에 있어서는 Domain Requirement 관련 부분을 Interview하는 사람보다, 엔지니어나 매지나거 정리해서 개발자에게 
               알려 주고 가르쳐주는 것이 더 빠를 수 있다. 
            
            -> 타과 사람들이 Domain Requirement ...? (다양한 경험, 생각측면,,,생각...?)
           
              
     *** Ethnography : 그냥 바로 코딩에 돌입해서 계속 코딩만 하고있지말고, 생각하는 데 시간을 많이 보내자! 그래서 진짜 필요한 것들을
                       만들자. 생각하는데 시간을 많이 써야 한다. 
                       
                       
     *** Stories and Senarios :
       >> Story 안에 여러 개의 Senario가 생길 수 있다. 
             ex) 유명 기업의 개발자의 사연(Story). 그 안에 그사람들이 쭉 걸어온 에피소드(Senario). 에피소드 하나하나가 시나리오이다. 
             ex2) 하나의 드라마(Story). 그 드라마에서의 매 회차마다 나오는 하나하나는 Senario.
             
       >> SW에서는 Story = Senario임. 결국 같은 것인데, Senario는 좀 더 구체적이고, 어떤 상황적 부분에 있어서는 Story가 지향하는
          방향은 더 두드러져 보일 것임. 
       >> 하지만, ex2 관점에서 SW에 스토리, 시나리오를 적용해 보면, 시스템에 대한 Story는 "System을 만들게 된 이유, 의도, 필요성"
          이고, 안에서 "어떤 것이 구현되어야 하는가" 가 Senario이다. 
            (ex: 토스 의 스토리 : 계좌에 있는 돈을 관리하기 위해서 만들었다!
                         시나리오 : 계좌 간의 이체 가능하게 하기. / 카드 등록 시 카드 결제 쉽게하기 / 등등 )
                         
       >> 이런 것들도 결국 Stakeholder 간의 관계가 존재한다. 똑같은 것을 바라봐도, Stakeholder 가 바라보는 Story와 Senario는 다 다를
          것이다. 
       
       >> User story를 보조하는 형태로 만든 것이 Senario이다!
       >> User Senario는 조금 더 구조화된 형태이기 때문에, 각각의 설명들이 다 있어야 함. 
       >> Starting Situation / 전체 flow / 잘못되었을 경우 / 동시에 해야 되는 것들 / (Senario가) 끝났을 때
            -> 전부다 하나의 "예시" 이다. 다 포함되어도 좋고, 일부만 포함되어도 된다. 
            -> 중요한 것은, "필요한 내용들이 다 들어가 있어야 한다!" 라는 것. 
            -> Senario에 시작과 끝이 있어야 하는것은 맞지만, 그것이 반드시 일정한 형태의 입력과 출력으로 끝날 필요는 없다. 
               (System의 정의에 있어서는, 입력과 출력이 다 정확하게 있어야 하겠지만, Senario에서는 그렇지 않아도된다)
               (입력이 없으면서 출력이 있을 수도 있고, 단순히 저장을 하는 시나리오라면 출력이 없는 경우도 있을 것임)
                     
                     
  ** Requirements Specification 
       
       >> 나온 Requirement(User Requirement & System Requirement)를 정해서, 정리해, 프로그램을 만들어 나갈 수 있는 문서.
            (번외, 하지만 강조사항 : Verification 은 System Requirement와 실제 제품을 가지고 비교하는 것이다)
            (Validation : User Requirement 가지고 비교하는 것.)
       
       >> User Requirement 는, 배경지식 없는 사람이 보아도 이해가능한 수준이어야 한다. (Domain Requirement (?) )
          개발 지식이 없어도 이해할 수 있게끔 설명해 줘야 하고, Reqiuirement는 그런 수준으로 작성이 되어야 한다는 것이다.
          (지나가는 사람이 보아도, 시스템에 대한 이해를 할 수 있어야 한다)
          
       >> System Requirement는 개발자가 볼 것이기 때문에, 조금 Deep하고 어려운 내용이 있어도 괜찮다. 구체적이면 구체적일수록 더 좋다.
          쉽게 풀어쓰다보면, 당연히 misunderstanding이 발생할 수 밖에 없다. 
       
       >> User Requirement와 System Requirement가 연관되게 작성되면 제일 좋다. 
           (ex: User Requirement를 1번에, System Requirement를 2,3,4번에 연동하는 식으로 해도 좋을 것이다)
           (User Requirement 보고 이해가 안되는 부분은 바로 System Requirement로 확인할 수 있을 것이다)
       
     *** Ways of Writing a System Requirements Specification
     
       >> 자연어 : 일상에서 흔히 쓰는 말(언어)로 작성하는 방법
       >> 구조화된 언어 : 구조화된 문법대로 작성하는 방법
       >> Design Description Language : UML(Unified Modeling Language) 처럼 작성하는 방식.
       >> Graphical Notation : 그림으로 나타내는 UML같은 것들.
       >> 수학적인 표현 : 수식들로 표현하는 방법
       
       >> 일반적으로는 Natural Language(자연어)를 가장 많이 쓴다. 특히나 User Requirement같은 경우, 자연어 아니면 방법이 없다. 
          최대한 모두가 알기 쉽게 적어야 하기때문. 
     
     *** Requirements and Design
       >> Requirement와 Design은 분리될 수 없다!
             ex) 무슨 요리를 할지 정해지지 않았는데, 무슨 냄비를 쓸지, 어떤 재료가 필요한지 알수는 없는 노릇.
                     
       >> 특정한 Non-Functional Requirement를 만족시키기 위해 어떤 특정한 Architecture를 사용해야 한다면, 그것이 Domain-Requriement가
          될 수 있다는 것이다. 
             ex) 안드로이드 프로그래밍을 하려면, 안드로이드 스튜디오가 깔려 있어야 한다. -> Domain Requirement
                     
     *** Natural Language Specification 
       >> 일반적인 유저들이 이해하기 쉽게, 표랑 그림을 활용해서 설명할 수 있다. 
       >> 직관적이고, 일반적이게 써야 한다. 
       
     *** Guidelines for Writing Requirements : 그냥 알기 쉽게 쓰자~
       >> 표준 양식을 지키자. 정해져 있으니 오해의 여지가 없음.
       >> 중요하다고 생각되는 내용들을 강조해서, 사람들이 한번더 그 부분을 볼 수 있게 해 주자. 오해 없이, 보기좋게 해주자!
        
     *** Problems with Natural Language(자연어로 쓰는 것의 단점)
       >> 자연어로 쓰면 모호해진다(Ambiguity 가 올라간다). 말로 설명하다 보면 애매하게 설명할 수도 있음. 정확성이 부족해짐. 
       >> Functional과 Non-Functional 내용이 섞여 있기 때문에, 혼동되게 설명될 수도 있다. 
             -> Requirement에서는, Functional / Non-Functional / Domain Requirement가 다 따로 분리되어 작성되어야 하는데,
                만약에 설명문장 안에 Functional/Non-Functional이 섞여 있게 된다면, 분리해서 따로 두개로 만들어야 함. 
                
       >> 다른 Requirement가 같이 표현되어 있는 경우. 한 문장안에 여러개의 작은 Requirement가 포함되어 있을 수 있음. 다 분리해야 한다. 

     *** Structured Specification 
                     
       >> Requirement를 쓰는 데 있어서, 특별한 제한사항이 없는 경우도 있지만, 표준 방식에 따라 써야 되는 경우도 있다.
             -> 표준을 따라야 되는 것 ex : "인증"에 관련되어 있는 Requirement. 안쓰면 인정을 못받으니, 무조건 표준대로 해야 함. 
                표준화 작업이 필요하다.
             -> 또, 그냥 일하는 사람들끼리는 돈을 주고받는 것이라, 서로 원하는 대로 표준을 정해서 하면 좋다. 
             -> 표준 쓰는 다른 예시 : Embedded System Requirement 쓸때
                       (Embedded System 같은 경우, 24시간 돌아가는 시스템이 많다. Embedded System에서는 그런 특성을 고려한 표준
                        이 때문에, 그런 고려대상에 대한 문서들이 있다. or 주기적으로 뭔가를 하는 것이 많기 때문에, 표준 형식이
                        다른 경우들이 있다.)
                        
     *** Form-based Specifications
     
       >> 양식을 정해 놓고, 스펙을 작성하는 방식이 있을 것임. 그 양식을 미리 정해놨으면, 쓰면된다.
       >> Function 이나 Entity에 대한 정의 / Input, 어디서 오는지 / Output, 어디로 나가는지 / Pre and Post condition / Side Effect
          ( 물론, 이중에 일부는 빼도 된다. 1,2,3번째가 제일 중요!)
          
          -> Function , entity 정의 : 무엇을 만들 것인가? 어떤 요구사항인가?
          -> Input, Output에 관한 내용 : 입력이 무엇이고, 출력이 무엇인가? 
          -> 나머지에 대한 내용이 있으면, 더 자세하게 오류 없이 할 가능성이 올라간다. 명시가 안되어있으면, 개발자의 역량과 상상에 의해
          결정이 되게 된다. (그래서 Spec이 자세해야 하는 것임! 최대한 나중에 Customer가 아니라 해서 고생안할려면)
          
          -> Tip : 문서를 많이 짜기보다는, 최대한 함수 이름을 자세하게, 길게 해서 최대한 정보를 많이 집어넣으면서, 맨위에 설명서 달아
                   놓으면 웬만하면 이해되는 식으로 짜도 좋을 것이다.
    
     
     *** Tabular Specification : 
       >> 자연어로 기술되어 있음.
       >> "~할 때"/ "~하게 되는 경우" , 이런 식으로 분류해 놓으면, Condition/Action 식으로 나뉘어서 "요것만 만족하면 돼!" 식으로 분류가
          되어 있기 때문에, 알아먹기도 편하고 개발할때도 편할 것이다. (표 형식으로 분류하는 것도 가능하다) (like 63/88)
       >> 표로, 정량적으로 표현하기 어려운 것들은 자연어로 처리하면 될 것이다. 
      
      
     *** Use Cases 
       >> UML 식으로, 보통 제일 많이 쓰는 애.( 컴공에서 많이 쓴다는 이야기지, 일반인들이 많이 쓴다는 이야기는 아님)
       >> 문서를 글로 쓰는 형식, Use Case를 쭉 나열함.(무엇을 사용하는가?)
       >> 전체 시스템을 사용하는 사용자(Actor)(역할별로 나눌수 있음. 역할별로 n개의 파트로 나누는것)가 있음.
       >> 각각의 Actor별로, 사용가능한 기능들이 있음. 그런 기능들을 누가 쓸수 있는지, 이런 것들이 다 Use Case가 되는 것임.
       >> Functional Requirement를 나타내는 데 대단히 직관적이다. 
    
     *** The Software Requirements Document
       >> Requirement를 작성할 때 제일 중요한 것은 "What"(뭘 해야 하는지)이다. 만든 Software 는 "무엇을 할 수 있는, 무엇을 해야 하는"
          Software이다!  가 중요한 것. (어떻게 구현한다, 어떻게 동작한다는 것은 없어야함. 그것은 설계단계에서 한다.)
       >> 단순히, "이 시스템을 통해 이런 것들을 제공받을 수 있습니다!" 가 끝임. 어떻게 동작할지는 뒤에 고민하는 단계이다.
            (여친없는놈한테, 크리스마스 때 여자친구랑 놀러 가야지! 하면 안되는것처럼, Requirement가 존재해야 그 다음 디자인을 어떻게
             할지 결정이 되는 것이다. 디자인도 Requirement가 다 결정되고 난 뒤에 한다.)
          
     *** Users of a Requirements Document
       >> 각 역할의 사람들에 대한 Requirement Document
           ex) Test Engineer : Validate Test를 어떻게 할 것인가 에 대한 Requirement가 있을 것임. 어떤 테스를 진행할지에 대한 Require
               ment도 당연히 존재한다! 
               
     *** Requirements Document Variability : Requirement에 대한 Document도 되게 다양하다! 
       >> 여러 가지 형식을 취하고 있고, 종류도 Requirement에 따라 다 다르다.       
    
     *** Requirements Validity (Checking)
       >> Requirement는 잘 정리되어야 하는데, "최종적으로" 잘 정리하려면 확인하는 과정(Validation)이 필요하다. 
       >> Requirement 체크할 때의 기준(Metrics) 
          -> Validity : 실제로 이게 가능한 이야기인가?(시스템이 제공할 수 있을 법한 기능들인가, 기능이 제공가능한가, 만들수있나)
          -> Consistency : Conflict(충돌)이 Requirement 간에 발생하면 안된다!
          -> Completeness : Requriement에서 빠진 것이 없는가? 고객 이미지에 맞게끔 모두 들어가 있는가? 
          -> Realism : 실제로 이게 가능한 이야기인가?
          -> Verifiability : 실제 우리가 확인할 수 있는 형태로 Requirement가 만들어졌는가? 
           (확인할 수 없는형태 : 물리적으로 확인이 힘든 사항들. 
                  ex : 24시간 내내 인증이 되어 있어야 하는 System. 사람이 24시간내내 잠도안자고 확인할 수는 없다
                  ex2 : 신이 존재하는지 검증할수가 없다. )(검증방법이 잘못되었다 와 검증 할수 없다는 다른 이야기!)
                  
     *** Requirements Validation Techniques(검증 방법)
       >> Requirement Review(리뷰) : 문서를 읽어보며 앞뒤가 안맞는 말들이 있는지 등, Requirement를 꼼꼼히 읽어보며 검증하기.
          -> 보통 모든 Stakeholder들이 다 같이 참여한다. 
          -> 작성한 사람도, 뭘 실수했는지, 어디가 틀렸는지 해당 오류를 쉽게 잘 발견하지 못하지만, 제3자가 보면 잘 알아챌 수 있기 때문.
          -> Review(한번더 보는 것)가 제일 쉬우면서 빨리 할 수 있는 Validation 방법 중 하나이다.
          -> formal한 근거들로 Review를 진행한다. 
          -> Review 시 체크해야 할 사항 : 
               1. Verifiability : 증명(검증)가능한가?  실제로 검증할 수 있는가? 
               2. Comprehensibility : 이해가 잘 되는가? (모호하게 작성금지! 이해를 할 수 있어야 한다!)
               3. Traceability : 과정을 잘 따라가고 있는가? (ex : 구매하기 전에, 로그인을 하고 있어야 구매할 수 있다! 등)
                                 프로그램의 flow가 충분히 잘 관리되고 있는가?
               4. Adaptability : 어떤 것이 시스템 상수정될 때, 다른 관련된 것들도 그에 합당하게 바로 수정되고 있는가? (다른 수정되어야
                                 할 사항들도 다같이 보는 것이다) 
                                            

       >> Prototyping : 실제 Requirement와 동일한지, 아닌지 등을 본다. (Requirement Validity도 될수 있을 것임)
                        Prototype에서 기능이 상충될 수도 있는데, 이런것들을 Prototyping하면서 알아볼 수도 있는 것이다.
                        이런 과정 자체가 Requirement Validation이 될 수 있는 것이다.
       >> Test-Case Generation : 요구사항들을 가지고 Test-Case를 만들어 보는 것. Test를 쉽게 할수있는가 없는가도 체크 가능하지만, 
                                 테스트가 "가능할지 아닐지" 도 알수 있을 것이다. 만약에 Test-Case를 못 만들어내면, 그 환경에서 
                                 그 그룹이 가진 것들로는 테스트가 안된다는 것을 알 수 있을 것임.
                                 
                                 
  
  ** Requirements Change                                  
                                
       >> Business 나 Technical 환경은, 설치되고 난 이후에 "항상" 바뀐다.
          -> 다 만들어놓고, 해보라고 주면 "어 이게 아닌데", "이렇게 되면 안되는데, 이거 고쳐줘" 등이 반드시!! 발생한다고 한다. 
          -> 아니면, 새로운 하드웨어가 생긴다던지, 기타 다른 비즈니스적으로 Price가 바뀐다던지 하는 등의 이유로 System을 바꾸어야
             하는 상황이 반드시 발생한다.
          
          -> 만들면, 만드는데서 끝나는 게 아니라, 반드시 바뀌는 사항이 생긴다!(여러 가지이유로! 개발적인 이유뿐만이 아님)
          -> Change가 발생한다는 이야기는, Requirement에서도 바뀌는 사항이 있다는 이야기랑 같음.
          
       >> Large System에서는, Change를 수정할 때 Conflict(모순,충돌) 이 생기는 부분을 주의해야 한다. 
          -> 워낙에 규모가 크기 때문에, 뭐 하나를 만족시키려면 나머지 다른 하나가 만족되지 않을 가능성이 높다. (워낙 기능들이 많아서)
                ex) 속도도 빨리 하고 싶은데, 처리도 많이 하고 싶다! 이런것들은 안된다. 아예 처리 알고리즘을 갈아엎지 않는 이상 불가능.
                ex2) 기존에는 오름차순으로 선별해야 한다고 했는데, 다른 곳에서는 내림차순으로 바꿔달라고 하는것도 충돌임.
          
          -> 결국, 이런 문제들은 "바꾸면서 생길수밖에 없는 문제" 들이다. 해당 Requirement가 바뀌면, 원래 있던 것은 아무리 그 전에 잘
             만들어 놓았더라도, Change가 생기면서 이런 충돌문제가 발생할 가능성이 매우 높다.
            
       >> Requirement도 계속 진화한다.       
          -> 앞서 나왔던 Maintenance와 비슷하다고 볼수있다.
          -> 문제에 대한 이해 / 초기 Requirements / 문제에 대한 바뀐 이해 / Requirement Change 순으로 진행된다.
              (무슨문제가 생긴지 이해하고, 초기 Requirement를 확인한 후, 그에 맞게 바꾸는 것임)
          -> 끊임없이 반복된다. 결국 이렇게 개선되다 보면 최종적으로는 Requirement가 "진화" 하는 것이다.     
              (필요에 의해서 바뀌는 것은 개선이지만, 꼭 진화라는 것이 무언가 기능이 더 생겨야만 진화라고 이야기하는 것은 아니다)
              
     *** Requirements Management (Planning)
       >> Requirement 정의 : 다른 Requirement와 Cross-Referenced 될 수 있어야함.(충돌 안되게)
       >> 관리 프로세스 변화 : 
          -> Change를 관리할 때 어떻게 할것인지 정해야 한다. 애초에 Requirement 관리할 때 이런것들까지 같이 고려해야 함.
          -> Requirement를 정할 때, 단순히 정하는 것이 아니라 "수정사항이 생겼을 때 어떻게 대응할 것인지" 도 염두에 두고 해야 한다.
          -> 문서를 작성했으면, 바뀔 때마다 바로바로 업데이트할 것인지, 일주일 간 모아놓고 업데이트할 것인지?
          -> 변경사항이 생겼을 때, 해당 내용을 변경하면 그전에 있던 것을 가져가면서 진행할 것인지/ 변경한 것 위주로 다시 개발할 것인지
             등의 내용도 정해놓고 시작해야 함.
       
        >> Traceability(이력관리) Process : 수정이 들어갔으면 어떻게 이력을 남길것인지 / Requirement에서는 어떻게 이력관리 할것인지?
        >> Tool Support : 어떤 Tool을 사용할 것인지!
                                  
      
      
