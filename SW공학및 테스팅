## 소프트웨어공학 및 테스팅 이론정리(2022.03.03~) ##

* 테스팅이라는 이론은 왜 나왔는가?
-> 이때동안은 빠르게 잘 만드는 것만 해도 괜찮았다! 만드는 것에 굉장히 초점이 많이 맞춰져 있었다. 
-> 그러다 보니, 안전에 관련된 소프트웨어에서(ex:테슬라의 오토파일럿 등) 많은 사고들이 발생을 하더라!
-> 그런 연유에서, 개발이 빨리 이루어지는 만큼 테스팅도 그에 따라 개발이 발전하는 속도에 맞춰 연구가 되고 있었다. 

@@-> 개발에서 잘못 되어 있는 것을 테스팅에서 잡아내지 못한다면, 큰 문제가 될 수 있다. 안전에 관련된 소프트웨어인데 이런 미스가 난다면
     개인의 안전과 재산상의 피해가 많이 발생할 것이다! 그렇기에 테스팅은 아주 중요하다.
     
*** 그렇기에, 항상 만들때는 테스팅할 것을 생각하면서 만드는 자세가 중요하다. (만드는 것도 중요하지만, 테스팅하는 것도 중요한 문제이기 때문) ***
ex) 임베디드 소프트웨어를 만들 때, 선에 표시 하나도 안해 놓고 이 선 저 것 다 결합해서 만들다가 문제가 생기면, 어느 선이 어떻게 연결되어 있는지 몰라
    상당히 애로사항이 발생할 것이다. 
    
*** 소프트웨어 공학에 있어서, 개발을 어떤 식으로 진행하는지 / 윤리적인 내용 & 그에 따른 여러가지 이슈들 / 여러가지 케이스들(실제사례) 같은 것들을 다룬다 ***

** 소프트웨어 코스트(Software Cost) : 단순히 어떤 소프트웨어를 개발하는 데 필요한 비용뿐 아니라, 이것을 개발하기 위해서 필요한 제반 사항들까지 모두 포함한 비용이다!
ex) 아이폰 - 부품, 원자재값 + 디자인을 만들고 기획하고 설계하고 양산하는 그런 제반사항들까지 모두 포함한 비용!

** 소프트웨어 프로젝트는 왜 가끔 가다 실패를 하는가?

-> 시스템 복잡도가 올라가는 사례 - 사용자가 단순히 이것 해달라, 저것도 넣어달라, 그것도 넣어달라 하다가 구조적으로 프로그램이 엉망이 되어 버리는 케이스. 
                                  단순하게는 지금 txt, binary, csv파일로 점점 올라가다가 실시간 처리를 요구하게 되는 그런 상황이었지만, 이것보다 더 고차원 적인 것을
                                  구현하다가 이런 식으로 엉망이 되어 버린다면 급기야 손을 댈 수도 없는 상황이 만들어질 수 있다. 너무 시스템 복잡도가 올라갔기 때문.
                                  
                                - 과감하게 싹 버리고 새로 짜는 것이 방법이 될 수 있다. 이미 해당 코드를 짜면서 생각해 놓은 부분들이 있기 때문에, 다음에 짜면 조금 더 
                                  구조적으로 더 잘 짤수밖에 없다. 그렇기에, 생겼던 문제들을 좀 생각하면서 짜는 것이라 좀 더 나은 결과물이 나오게 된다.   


-> 소프트웨어 개발 방법(론)이    - 개발 방법(론)이 무조건적으로 어떠한 방식으로 개발하야 된다 라는 것은 없다! 기본적으로 "이런 종류의 SW는 이렇게 만드는 것이 좋다!" 라는 
   해당 소프트웨어 개발 케이스에   사례들이 있긴 함. 하지만 그게 만능이고, 무조건 정답이라는 것은 아니다. 무조건 정답이 아닌데도 불구하고 해당 기법으로 소프트웨어를 개발하려고
   맞지 않은 사례                 고집을 부리다 보면, 이도저도 아닌 상황이 벌어지고 시간을 못 맞추거나 기능적으로 동작을 잘 하지 못하는 등의 사례가 발생할 수 있다. 
                                   
                                   ex) WaterFall 방법론 : 많은 시간이 걸린다. 하지만 한달짜리 프로젝트에 해당 방법론을 들고 오다보면 절대로 가능할 수 없는 것이다. 
                                                          다른 개발 방법론에서 여기에 맞게끔 변형을 하던지, 아니면 어떤 시스템을 바꿔서 변형을 하는 등의 결단이 필요하다. 
                                                          정답은, 해당 개발에 맞는 솔루션을 만들어 내야 하는 것이다!!
                                                          
                                                          
 * Professional Software Development *
 
 ** Software Engineering에서 자주 질문되는 것들 ! :
 
  -> 소프트웨어란 무엇인가? :  단순히 컴퓨터 프로그램으로 끝나지 않는다. 여기에 추가로 관련 소프트웨어 문서가 들어간다!(Like 사용자 메뉴얼)
                              관련된 문서들이 단순히 고객을 위해서 존재하는 것 뿐만은 아니다. 개발자 본인들이, 자기가 만든 소프트웨어 구조를 잊어버릴 수도 있고,
                              애초에 다같이 협업해서 만들었을 수도 있다. 이럴 때를 대비해서 과거의 본인 또는 동료들이 작성했던 문서들을 확인하면서 고쳐야 할 것이다. 
                              문서를 확인하면 소프트웨어의 구조를 알 수 있을 것이고, 어떻게 고쳐야 할지 방향을 잡을 수 있기 때문이다. 
                              
                              하지만, 무조건적으로 문서화만 해서는 안 될 것이다. 문서화 하라고 하여 1부터 10까지 다 일일이 적고 있으면 개발이 진척이 안 될 것이다. 
                              손은 언제나 한정적이게 되어 있다. 비중을 적절히, 요구도에 따라 조절을 해야 한다. 
                              물론, 하나부터 열까지 다 기록하는것이 제일 좋고, 문제 생길 소지도 제일 적다. 하지만, 그만큼 시간도, 힘도 많이 들고 해야 할 일이 많음.
                              인력이 더 필요한 것이다. 
                              
  -> Software vs Software Product :  Software Product는, 그것을 쓰고자 하는(쓸 수도 있는) 사람이나 그룹을 위해 만들어 질 수 있는 Software를 말한다. (맥락을 이해하자!)
  
  -> 소프트웨어 공학이 추구하는 방향? : 좋은 소프트웨어를 만드는 것. 좋은 소프트웨어는 어떤 것을 가지고 있는가 하는가? 를 알고 추구하는 것.
                                       Required Functionality and Performance "To the User". 개발자에게 좋고, 개발자가 만들기 쉽고, 잘 쓰기 쉬운 것이 아니라 
                                       개발자가 만들어서 누군가에게 쓰라고 만들어 주는 것이다! 
                                       그러므로, 쓰는 사람에게 편해야 하고, 잘 동작해야 하며, 이 사람에게 좋은 성능을 내야 하는 것이다. 이것이 제일 중요함!
                                           
                                       결국 모든 측면을 봐야 한다! 소프트웨어를 생산하는 과정에 있어 필요한 모든 제반 사항을 다 알아야 할 필요가 있다~
                                           
  ->SW Engineering vs Computer Science 차이? : 컴퓨터 전반의 지식(필요한 하드웨어, 동작하는 과정이나 방식 등) 을 보고 Computer Science라 하고,
                                                SW Engineering은 해당 "컴퓨터"를 동작시키는 Software를 만드는 데 필요한 여러 가지 개발 방식 등을 말하는 것.
                          
                          
  -> 개발 프로세스 활동 : Specification / Development / (Validation)(테스팅) / Evolution
                          
                          Specification : 스펙 짜는 것. 소프트웨어를 만들 때, 이를 위해서 필요한 "스펙"들이 있을 것이다. 하드웨어 스펙은 어떤 수준까지 필요하며, 
                                          소프트웨어는 A에서 a라는 동작을 해야 하고, B에서 b라는 동작을 해야 한다 라는 등의 것을 정의하는 것을 Specification이라고
                                          한다. 
                                          
                          Development : Specification한 것들을 실제로 구현하는 일. 구현하기 위해서는 A라는 방식을 취해야 하고, n명이 필요하며, 누가 뭘 해야 되는지 
                                        정하고, 실제로 구현하는 것이 Development 과정이라고 생각하면 된다.
                                        
                          Validation : 잘 만들었으면, 잘 개발되었느지 확인하는 과정이 필요하다. 그냥 만들어놓고, 내가 잘 만들었다고 얘기할 수는 없다. 
                                       Software가 정확히 동작하는지 확인해야 하는 것임. Specification에서 정해져 있는 대로 잘 만들어졌느냐의 관점과,
                                       실제로 만들었지만, 정의되어 있지 않지만 기본적으로 들어가야 되는 사안들에 대해서도 잘 들어가있는지 확인하는 것.
                                       ex) 안드로이드 앱인데, 터치 식으로 입력이 아니면 곤란할 것이다. 추가적으로, 서버 단에서 처리해야 할 과정들을 
                                           사용자 인터페이스 단에서 처리하여 다른 앱보다 훨씬 더 많은 데이터를 소모하게 되는 것도 곤란할 것이다. 
                                           이런 기본적인? 사안들도 다 들어가 있는지, 그 전반적인 것도 확인이 필요하다.
                                           
                          Evolution : 여러 가지 이유로 (예 : 시간이 많이 흐르는 등)(옛날 정보라 업데이트가 필요하거나, 새로운 기술이 나와서 추가하는 등)
                                      추가적인 기능이나 데이터를 추가할 수도 있다. 반면에, 특정 기능은 이제 안 쓰는 기능이니 뺄 수도 있을 것이다.
                                      
                                      소프트웨어가 이런 작업으로 인해 "진화" 하는 것을 보고 Evolution이라고 함.
                                      
   *** -> 위의 4단계가 계속 반복되는 것이다! Evolution 단계를 마치고 나면, 다시 우리가 쓰고 있는 소프트웨어에서 더 필요한 게 있는지 Specification 하게 된다..
          그렇게 되면 다시 Development를 거치며, Validation 단계를 필요로 할 것이다. 그리고 다시 업데이트 한다. (Like 카카오톡 어플리케이션)
  
  -> SW Engineering에서 요구되는 Key Challenging : 다들 원하는 게 다르고 해달라는 것은 많은데 시간은 없다! 개발하는데 절대적인 시간이 많이 부족하다. 
                                                   굉장히 빨리 개발하는게 중요함. 그러다 보니 Framework도 많이 생기고, 플랫폼 기반의 Application을 개발하는 이유가 
                                                   되기도 한다. (남들이 다 API 개발해 놓아서 편하다!)
                          
  -> SW Engineering 에서의 Cost : 개발 60%, 테스팅 40%. 덩치가 더 커지면 커질수록 테스팅 비용이 엄청나게 증가해서 더 그렇다. 
  
  
 ** SW Product의 종류 두가지 :
   -> General Product : 거의 전부 다. 구글 플레이에 들어가서 설치하는 앱들은, 고객층을 그냥 노리고 만든 앱이다. 꼭 누가 만들어달라고 부탁해서 만든 앱이 아니라, 
                        누가 쓸지는 모르지만 "이런 걸 만들었으니 잘 써 봐!" 하고 만든 것임. 
                        
   -> Customized Product : 특정 고객이 "어떤 것이 필요하다" 라는 요청을 하면, 그대로 만들어 주는 것. 
                              
    *** 이 두가지 소프트웨어를 만드는 방식이 당연히 같을 수가 없다! 그리고 두 가지 소프트웨어의 특성, 특징 또한 다 다를 것이다!
        막상 시대의 흐름을 따라 만든것이 잘 안될수도 있고, 그냥 막상 만들었는데 잘 될 수도 있는 것이 General Product의 특징이다. 
        반면 Coustomized Product는 고객의 요청에 따라 만드는 것이라, 쉬울 수도 있다.(물론 고객이 까탈스러운 사람이라면 힘들 수도 있겠지만)
        고객이 속내를 잘 내보이는 사람이라면, 꼬치꼬치 캐물어가며 만들 수도 있을 것이다. 하지만, 고객이 그런 것 없이 빙빙 돌리는 사람이라면
        개발자가 정리해서 설득시켜야 할 수도 있다.
        
 ** 좋은 소프트웨어를 개발하기 위해 필수적으로 해야 할 것들
    -> Maintainability / Dependability & Security / Efficiency / Acceptability
    
    -> Maintainability(유지보수) : 유지보수를 얼마나 잘 할 수 있는가?! 에 대한 것. 
                                   수정, 삭제, 기능추가 3가지를 보고 유지보수라고 한다. 이 3가지를 잘 할 수 있게 만들어야 할 것이다.
                                   물론 이 3가지를 적절히 잘 수행해야 하는것도 포함.
    
    -> Dependability : 어떤 "컴퓨터"에서 돌려도 잘 동작해야 한다는 것! 
    
    -> Efficiency(효율성) : 얼마나 해당 소프트웨어가 유저에게 맞게끔 만드냐?! 얼마나 적은 힘을 들여서, 편리하게 잘 사용할 수 있는가? 하는 것.
    
    -> Acceptability : 해당 프로그램이 수용이 가능한 정도. 완벽하게 해당 요건을 만족하지는 못했지만, 이 정도면 "수용 가능하다!" 한다면 사용할 
                       수도 있을 것이다. 
        
        
        
        
        
